name: Run Flyway Migrations on Fargate

on:
  push:
    branches:
      - migrations

jobs:
  migrate:
    name: Build + Run Flyway Migration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Flyway Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./flyway
          file: ./flyway/Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_NAME }}:flyway

      - name: Get ECS Network Configuration
        id: ecs-net
        run: |
          SERVICE_DESC=$(aws ecs describe-services \
            --cluster ${{ vars.CLUSTER_NAME }} \
            --services ${{ vars.SERVICE_NAME }})

          SUBNET=$(echo "$SERVICE_DESC" | jq -r '.services[0].networkConfiguration.awsvpcConfiguration.subnets[0]')
          SG=$(echo "$SERVICE_DESC" | jq -r '.services[0].networkConfiguration.awsvpcConfiguration.securityGroups[0]')

          echo "subnet_id=$SUBNET" >> $GITHUB_OUTPUT
          echo "security_group_id=$SG" >> $GITHUB_OUTPUT

      - name: Run Flyway Task on ECS Fargate
        run: |
          aws ecs run-task \
            --cluster ${{ vars.CLUSTER_NAME }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.ecs-net.outputs.subnet_id }}],securityGroups=[${{ steps.ecs-net.outputs.security_group_id }}],assignPublicIp=ENABLED}" \
            --task-definition flyway-task
